HW 8: AVL tree.  You program will take an input sequence of integers and create an AVL tree
by continuously invoking an add_node function.
In addition, you need to implement a remove_node function (to remove a node with a given value).
You are required to continue from the partial code that I provided below.


Part A (due Friday, November 18): Implement the member functions for R-Rotate and L-Rotate,
	including the corresponding height update for related nodes.
Part B (Due Wednesday, November 30): implement remove function.


If you complete the part A, you should immediately move to Part B.




//Partial code for HW8 by C-Y (Roger) Chen, Syracuse University

#include <iostream> //to use cout
#include <algorithm> //to use max function

using namespace std;

class node {
public:
	int value;
	int height;
	int child; //0: this node is a left child of its parent; 1: right child; -1 this node is the tree root
	node * parent;
	node * l_child;
	node * r_child;
	node() {}
	node(int i) { value = i; height = 1; parent = l_child = r_child = nullptr; }

};

class avl_tree {
public:
	node * root;
	avl_tree() {
		root = nullptr;
	}
	void add_node(int i);
	void in_order_traversal(node *p);
	node * height_adjustment(node *p, int &pattern);
	//void L_Rotate(node *p); You need to implement this.
	//void R_Rotat(node *p); You need to implement this.
	//void remove_node(int i); You need to implement this.
};
void avl_tree::add_node(int i) {
	int pattern;
	node * p = new node(i);
	node * action_node;
	if (root == nullptr) { root = p; p->child = -1; return; }
	node  * p1 = root, *p2 = root;
	while (p1 != nullptr) {
		p2 = p1;
		if (i < p1->value) { p->child = 0; p1 = p1->l_child; }
		else {
			p->child = 1;
			p1 = p1->r_child;
		}
	}
	//p1 = p;
	p->parent = p2;
	if (p->child == 0) { p2->l_child = p; }
	if (p->child == 1) { p2->r_child = p; }
	action_node = height_adjustment(p2, pattern);
	if (action_node != nullptr) cout << "action_node's value =  " << action_node->value << "  Imbalance Pattern  = " << pattern << endl;



}
void avl_tree::in_order_traversal(node * p) {
	if (p == nullptr)  return;
	in_order_traversal(p->l_child);
	cout << "value = " << p->value << " " << "height = " << p->height << "   ";
	in_order_traversal(p->r_child);
}


node * avl_tree::height_adjustment(node *p, int &pattern) {
	int pattern1, pattern2;
	node * p1;
	int l_height, r_height, new_height;
	while (p != nullptr) {
		if (p->l_child == nullptr) l_height = 0; else l_height = p->l_child->height;
		if (p->r_child == nullptr) r_height = 0; else r_height = p->r_child->height;
		new_height = max(l_height, r_height) + 1;
		//the following statement has been revised
		if (new_height == p->height  && abs(l_height - r_height) <= 1) { return nullptr; }
		p->height = new_height;
		if (abs(l_height - r_height) > 1) {

			if (l_height > r_height) {
				pattern1 = 0; //L pattern
				p1 = p->l_child;
			}
			else {
				pattern1 = 1; //R pattern
				p1 = p->r_child;
			}

			if (p1->l_child == nullptr) l_height = 0; else l_height = p1->l_child->height;
			if (p1->r_child == nullptr) r_height = 0; else r_height = p1->r_child->height;

			if (l_height > r_height) {
				pattern2 = 0; //L pattern
			}
			else {
				pattern2 = 1; //R pattern
			}
			if (pattern1 == 0 && pattern2 == 0) pattern = 0; //L-L pattern.  Need to invoke  R_Rotate
			if (pattern1 == 0 && pattern2 == 1) pattern = 1; //L-R pattern.  Need to invoke  L_Rotate and then R_Rotate
			if (pattern1 == 1 && pattern2 == 0) pattern = 2; //R-L pattern.  Need to invoke  R_Rotate and then L_Rotate
			if (pattern1 == 1 && pattern2 == 1) pattern = 3; //R-R pattern.  Need to invoke  L_Rotate
			return p;
		}
		p = p->parent;
	} //p points to the action nodee
	  //the first node with height imbalance
	return nullptr;
}

int main() {
	avl_tree t1;
	t1.add_node(45);
	t1.add_node(32);
	t1.add_node(38);
	//t1.add_node(35);
	//t1.add_node(500);
	t1.in_order_traversal(t1.root);
	getchar();
	getchar();
	return 0;
}